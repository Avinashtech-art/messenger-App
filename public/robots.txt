
import React, { useState, useRef, useEffect } from "react";
import "./chat.css";
import ChatSidebar from "./ChatSidebar.js";
import Search from "./Search.js";
import ChatHeader from "./Header";
import { useDispatch, useSelector } from "react-redux";
import { addMessage, deleteMessage, editMessage } from "../features/chat/chatSlice";

export function ChatUI() {
  const [newMessage, setNewMessage] = useState("");
  const [isFirstUser, setIsFirstUser] = useState(true);
  const messagesEndRef = useRef(null);
  const [editingMessageId, setEditingMessageId] = useState(null);
  const [editingMessageContent, setEditingMessageContent] = useState("");
  
  const dispatch = useDispatch();
  const messages = useSelector((state) => state.chat.messages);

  const handleSubmit = (event) => {
    event.preventDefault();
    if (newMessage.trim()) {
      dispatch(addMessage(newMessage.trim()));
    }
    setNewMessage("");
  };

  const handleEdit = (id, content) => {
    dispatch(editMessage({ id, content }));
  };

  const handleSaveEdit = (id, content) => {
    dispatch(editMessage({ id, content }));
  };

  const handleDelete = (id) => {
    dispatch(deleteMessage(id));
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  return (
    <div className="grid-container ">
      <ChatHeader />

      <div className="chatGrid-UI">
        <div className="UI">
          <div className="chat-container">
            <ul className="text">
              {messages.map((message) => (
                <div key={message.id} className="message-container">
                  {message.sender === "user1" ? (
                    <div>
                      <span>
                        <div className="message-left">
                          <div className="box">
                            {editingMessageId === message.id ? (
                              <>
                                <input
                                  type="text"
                                  value={editingMessageContent}
                                  onChange={(e) =>
                                    setEditingMessageContent(e.target.value)
                                  }
                                />
                                <button
                                  onClick={() =>
                                    handleSaveEdit(
                                      editingMessageId,
                                      editingMessageContent
                                    )
                                  }
                                >
                                  Save
                                </button>
                              </>
                            ) : (
                              message.content
                            )}
                          </div>
                          <div className="buttons">
                            {editingMessageId !== message.id && (
                              <li>
                                {" "}
                                <button
                                  onClick={() => handleEdit(message.id, message.content)}
                                >
                                  Edit
                                </button>
                              </li>
                            )}
                            <li>
                              {" "}
                              <button onClick={() => handleDelete(message.id)}>
                                Delete
                              </button>
                            </li>
                          </div>
                        </div>
                      </span>
                    </div>
                  ) : (
                    <div className="message-right">
                      <div className="box">
                        {editingMessageId === message.id ? (
                          <>
                            <input
                              type="text"
                              value={editingMessageContent}
                              onChange={(e) =>
                                setEditingMessageContent(e.target.value)
                              }
                            />
                            <button
                              onClick={() =>
                                handleSaveEdit(
                                  editingMessageId,
                                  editingMessageContent
                                )
                              }
                            >
                              Save
                            </button>
                          </>
                        ) : (
                          message.content
                        )}
                      </div>
                      <div className="buttons">
                        {editingMessageId !== message.id && (
                          <button
                            onClick={() => handleEdit(message.id, message.content)}
                          >
                            Edit
                          </button>
                        )}
                        <button onClick={() => handleDelete(message.id)}>
                          Delete
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              ))}
              <div ref={messagesEndRef} />
            </ul>
          </div>

          <div className="container-form">
            <div className="form">
              <form onSubmit={handleSubmit} className="form-container">
                <div className="form-childOne">
                  <input
                    type="text"
                    className="input-section"
                    value={newMessage}
                    onChange={(event) => setNewMessage(event.target.value)}
                  />
                </div>

                <div className="form-childtwo">
                  <div className="switch">
                    <label>
                      <input
                        type="checkbox"
                        checked={isFirstUser}
                        onChange={() => setIsFirstUser(!isFirstUser)}
                      />
                      <span className="slider round"></span>
                      <br></br>
                      <br></br>
                      {/* {/ {isFirstUser ? "user1" : "user2"} /} */}
                    </label>
                  </div>
                </div>

                <div className="form-childthree">
                  <button type="submit">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="16"
                      height="16"
                      fill="currentColor"
                      className="bi bi-send-fill"
                      viewBox="0 0 16 16"
                    >
                      <path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 3.178 4.995.002.002.26.41a.5.5 0 0 0 .886-.083l6-15Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z" />
                    </svg>
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>

      <Search />
      <ChatSidebar />
    </div>
  );
}

export default ChatUI;




import React, { useState, useRef, useEffect } from "react";
import "./chat.css";
import ChatSidebar from "./ChatSidebar.js";
import Search from "./Search.js";
import ChatHeader from "./Header";
import { useDispatch, useSelector } from "react-redux";

import {
  addMessage,
  deleteMessage,
  editMessage,
} from "../features/chat/chatSlice";

export function ChatUI() {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [isFirstUser, setIsFirstUser] = useState(true);
  const messagesEndRef = useRef(null);
  const [editingMessageId, setEditingMessageId] = useState(null);
  const [editingMessageContent, setEditingMessageContent] = useState("");

  // const dispatch = useDispatch();
  // const messages = useSelector((state) => state.chat.messages);

  // generate a unique ID for each message
  const generateId = () => {
    return Math.floor(Math.random() * 100000);
  };

  // const handleSubmit = (event) => {
  //   event.preventDefault();
  //   if (newMessage.trim()) {
  //     // what it done here?
  //     const message = {
  //       id: generateId(),
  //       content: newMessage.trim(),
  //       sender: isFirstUser ? "user1" : "user2",
  //     };
  //     setMessages([...messages, message]);
  //   }
  //   setNewMessage("");
  // };

  // const handleEdit = (id, content) => {
  //   setEditingMessageId(id);
  //   setEditingMessageContent(content);
  // };

  // const handleSaveEdit = (id, content) => {
  //   const updatedMessages = messages.map((message) => {
  //     if (message.id === id) {
  //       return { ...message, content: content };
  //     }
  //     return message;
  //   });
  //   setMessages(updatedMessages);
  //   setEditingMessageId(null);
  //   setEditingMessageContent("");
  // };

  // const handleDelete = (id) => {
  //   const updatedMessages = messages.filter((message) => message.id !== id);
  //   setMessages(updatedMessages);
  // };

 

  const chats = useSelector((state) => state.chat);
  const dispatch = useDispatch();

  const handleSubmit = (event) => {
    event.preventDefault();
    if (newMessage.trim()) {
      dispatch(addMessage(newMessage.trim()));
    }
    setNewMessage("");
  };

  const handleEdit = (id, content) => {
    setEditingMessageId(id);
    setEditingMessageContent(content);
  };

  const handleSaveEdit = (id, content) => {
    dispatch(editMessage({ id, content }));
    setEditingMessageId(null);
    setEditingMessageContent("");
  };

  const handleDelete = (id) => {
    dispatch(deleteMessage(id));
  };


  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  return (
    <div className="grid-container ">
      <ChatHeader />

      <div className="chatGrid-UI">
        <div className="UI">
          <div className="chat-container">
            <ul className="text">
              {messages.map((message) => (
                <div key={message.id} className="message-container">
                  {message.sender === "user1" ? ( // Change this implementation, make use of a flag which tells whether the message is sender/reciever.
                    <div>
                      <span>
                        <div className="message-left">
                          <div className="box">
                            {editingMessageId === message.id ? (
                              <>
                                <input
                                  type="text"
                                  value={editingMessageContent}
                                  onChange={(e) =>
                                    setEditingMessageContent(e.target.value)
                                  }
                                />

                                <button
                                  onClick={() =>
                                    handleSaveEdit(
                                      editingMessageId,
                                      editingMessageContent
                                    )
                                  }
                                >
                                  Save
                                </button>
                              </>
                            ) : (
                              message.content
                            )}
                          </div>
                          <div className="buttons">
                            {editingMessageId !== message.id && (
                              <li>
                                {" "}
                                <button
                                  onClick={() =>
                                    dispath(editMessage(message.id, message.content))
                                  }
                                >

                                <button
                                  onClick={() =>
                                    handleEdit(message.id, message.content)
                                  }
                                >
                                  Edit
                                </button>
                              </li>
                            )}
                            <li>
                              {" "}
                              <button onClick={() => handleDelete(message.id)}>
                                Delete
                              </button>
                            </li>
                          </div>
                        </div>
                      </span>
                      {/* <span>
                    <Space className="dropdown-demo"/>
                      <Dropdown droplist={dropList} position="bl">
                        <Button type="text">
                         : 
                        </Button>
                      </Dropdown>
                    </span> */}
                    </div>
                  ) : (
                    <div className="message-right">
                      <div className="box">
                        {editingMessageId === message.id ? (
                          <>
                            <input
                              type="text"
                              value={editingMessageContent}
                              onChange={(e) =>
                                setEditingMessageContent(e.target.value)
                              }
                            />
                            <button
                              onClick={() =>
                                handleSaveEdit(
                                  editingMessageId,
                                  editingMessageContent
                                )
                              }
                            >
                              Save
                            </button>
                            {/* <button onClick={handleCancelEdit}>Cancel</button> */}
                          </>
                        ) : (
                          message.content
                        )}
                      </div>
                      <div className="buttons">
                        {editingMessageId !== message.id && (
                          <button
                            onClick={() =>
                              handleEdit(message.id, message.content)
                            }
                          >
                            Edit
                          </button>
                        )}
                        <button onClick={() => handleDelete(message.id)}>
                          Delete
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              ))}
              <div ref={messagesEndRef} />
            </ul>
          </div>

          <div className="container-form">
            <div className="form">
              <form onSubmit={handleSubmit} className="form-container">
                <div className="form-childOne">
                  <input
                    type="text"
                    className="input-section"
                    value={newMessage}
                    onChange={(event) => setNewMessage(event.target.value)}
                  />
                </div>

                <div className="form-childtwo">
                  <div className="switch">
                    <label>
                      <input
                        type="checkbox"
                        checked={isFirstUser}
                        onChange={() => setIsFirstUser(!isFirstUser)}
                      />
                      <span className="slider round"></span>
                      <br></br>
                      <br></br>
                      {/* {/ {isFirstUser ? "user1" : "user2"} /} */}
                    </label>
                  </div>
                </div>

                <div className="form-childthree">
                  <button type="submit">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="16"
                      height="16"
                      fill="currentColor"
                      className="bi bi-send-fill"
                      viewBox="0 0 16 16"
                    >
                      <path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 3.178 4.995.002.002.26.41a.5.5 0 0 0 .886-.083l6-15Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z" />
                    </svg>
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>

      <Search />
      <ChatSidebar />
    </div>
  );
}

export default ChatUI;





.............................

import React, { useState, useRef, useEffect } from "react";
import "./chat.css";
import ChatSidebar from "./ChatSidebar.js";
import Search from "./Search.js";
import ChatHeader from "./Header";
import { useDispatch, useSelector } from 'react-redux';

import { addMessage,deleteMessage,editMessage } from "../features/chat/chatSlice";


function ChatUI() {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [isFirstUser, setIsFirstUser] = useState(true);
  const messagesEndRef = useRef(null);
  const [editingMessageId, setEditingMessageId] = useState(null);
  const [editingMessageContent, setEditingMessageContent] = useState("");

  
  const chats = useSelector((state) => state.chats);
  const dispath = useDispatch()

  


  // generate a unique ID for each message
  const generateId = () => {
    return Math.floor(Math.random() * 100000);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    if (newMessage.trim()) { // what it done here?
      const message = {
        id: generateId(),
        content: newMessage.trim(),
        sender: isFirstUser ? "user1" : "user2",
      };
      setMessages([...messages, message]);
    }
    setNewMessage("");
  };

  const handleEdit = (id, content) => {
    setEditingMessageId(id);
    setEditingMessageContent(content);
  };

  const handleSaveEdit = (id, content) => {
    const updatedMessages = messages.map((message) => {
      if (message.id === id) {
        return { ...message, content: content };
      }
      return message;
    });
    setMessages(updatedMessages);
    setEditingMessageId(null);
    setEditingMessageContent("");
  };

  const handleDelete = (id) => {
    const updatedMessages = messages.filter((message) => message.id !== id);
    setMessages(updatedMessages);
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  return (
    <div className="grid-container ">
           <ChatHeader /> 

      <div className="chatGrid-UI">

        <div className="UI">
       

          <div className="chat-container">
            <ul className="text">
              {messages.map((message) => (
                <div key={message.id} className="message-container">
                  {message.sender === "user1" ? ( // Change this implementation, make use of a flag which tells whether the message is sender/reciever.
                    <div>
                    <span>
                    <div className="message-left">
                     
                     
                      <div className="box">
                        {editingMessageId === message.id ? (
                          <>
                            <input
                              type="text"
                              value={editingMessageContent}
                              onChange={(e) =>
                                setEditingMessageContent(e.target.value)
                              }
                            />
                            
                            <button
                              onClick={() =>
                                handleSaveEdit(
                                  editingMessageId,
                                  editingMessageContent
                                )
                              }
                            >
                              Save
                            </button>
                          </>
                        ) : (
                          message.content
                        )}
                      </div>
                      <div className="buttons">
                        {editingMessageId !== message.id && (
                          <li>
                            {" "}
                            <button
                              onClick={() =>
                                handleEdit(message.id, message.content)
                              }
                            >
                              Edit
                            </button>
                          </li>
                        )}
                        <li>
                          {" "}
                          <button onClick={() => handleDelete(message.id)}>
                            Delete
                          </button>
                        </li>
                      </div>
                    </div>
                    </span>
                    {/* <span>
                    <Space className="dropdown-demo"/>
                      <Dropdown droplist={dropList} position="bl">
                        <Button type="text">
                         : 
                        </Button>
                      </Dropdown>
                    </span> */}
                    </div>
                    
                    
                    
                  ) : (
                    <div className="message-right">
                      <div className="box">
                        {editingMessageId === message.id ? (
                          <>
                            <input
                              type="text"
                              value={editingMessageContent}
                              onChange={(e) =>
                                setEditingMessageContent(e.target.value)
                              }
                            />
                            <button
                              onClick={() =>
                                handleSaveEdit(
                                  editingMessageId,
                                  editingMessageContent
                                )
                              }
                            >
                              Save
                            </button>
                            {/* <button onClick={handleCancelEdit}>Cancel</button> */}
                          </>
                        ) : (
                          message.content
                        )}
                      </div>
                      <div className="buttons">
                        {editingMessageId !== message.id && (
                          <button
                            onClick={() =>
                              handleEdit(message.id, message.content)
                            }
                          >
                            Edit
                          </button>
                        )}
                        <button onClick={() => handleDelete(message.id)}>
                          Delete
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              ))}
              <div ref={messagesEndRef} />
            </ul>
          </div>
          
          <div className="container-form">
            <div className="form">
              <form onSubmit={handleSubmit} className="form-container">
                <div className="form-childOne">
                  <input
                    type="text"
                    className="input-section"
                    value={newMessage}
                    onChange={(event) => setNewMessage(event.target.value)}
                  />
                </div>

                <div className="form-childtwo">
                  <div className="switch">
                    <label>
                      <input
                        type="checkbox"
                        checked={isFirstUser}
                        onChange={() => setIsFirstUser(!isFirstUser)}
                      />
                      <span className="slider round"></span>
                      <br></br>
                      <br></br>
                      {/* {/ {isFirstUser ? "user1" : "user2"} /} */}
                    </label>
                  </div>
                </div>

                <div className="form-childthree">
                  <button type="submit">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="16"
                      height="16"
                      fill="currentColor"
                      className="bi bi-send-fill"
                      viewBox="0 0 16 16"
                    >
                      <path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 3.178 4.995.002.002.26.41a.5.5 0 0 0 .886-.083l6-15Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z" />
                    </svg>
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>

      <Search />
      <ChatSidebar />
    </div>
  );
}

export default ChatUI;



.................








import React, { useState } from 'react';
import {
  MDBContainer,
  MDBTabs,
  MDBTabsItem,
  MDBTabsLink,
  MDBTabsContent,
  MDBTabsPane,
  MDBBtn,
  MDBIcon,
  MDBInput,
  MDBCheckbox
}
from 'mdb-react-ui-kit';

function App() {

  const [justifyActive, setJustifyActive] = useState('tab1');;

  const handleJustifyClick = (value) => {
    if (value === justifyActive) {
      return;
    }

    setJustifyActive(value);
  };

  return (
    <MDBContainer className="p-3 my-5 d-flex flex-column w-50">

      <MDBTabs pills justify className='mb-3 d-flex flex-row justify-content-between'>
        <MDBTabsItem>
          <MDBTabsLink onClick={() => handleJustifyClick('tab1')} active={justifyActive === 'tab1'}>
            Login
          </MDBTabsLink>
        </MDBTabsItem>
        <MDBTabsItem>
          <MDBTabsLink onClick={() => handleJustifyClick('tab2')} active={justifyActive === 'tab2'}>
            Register
          </MDBTabsLink>
        </MDBTabsItem>
      </MDBTabs>

      <MDBTabsContent>

        <MDBTabsPane show={justifyActive === 'tab1'}>

          <div className="text-center mb-3">
            <p>Sign in with:</p>

            <div className='d-flex justify-content-between mx-auto' style={{width: '40%'}}>
              <MDBBtn tag='a' color='none' className='m-1' style={{ color: '#1266f1' }}>
                <MDBIcon fab icon='facebook-f' size="sm"/>
              </MDBBtn>

              <MDBBtn tag='a' color='none' className='m-1' style={{ color: '#1266f1' }}>
                <MDBIcon fab icon='twitter' size="sm"/>
              </MDBBtn>

              <MDBBtn tag='a' color='none' className='m-1' style={{ color: '#1266f1' }}>
                <MDBIcon fab icon='google' size="sm"/>
              </MDBBtn>

              <MDBBtn tag='a' color='none' className='m-1' style={{ color: '#1266f1' }}>
                <MDBIcon fab icon='github' size="sm"/>
              </MDBBtn>
            </div>

            <p className="text-center mt-3">or:</p>
          </div>

          <MDBInput wrapperClass='mb-4' label='Email address' id='form1' type='email'/>
          <MDBInput wrapperClass='mb-4' label='Password' id='form2' type='password'/>

          <div className="d-flex justify-content-between mx-4 mb-4">
            <MDBCheckbox name='flexCheck' value='' id='flexCheckDefault' label='Remember me' />
            <a href="!#">Forgot password?</a>
          </div>

          <MDBBtn className="mb-4 w-100">Sign in</MDBBtn>
          <p className="text-center">Not a member? <a href="#!">Register</a></p>

        </MDBTabsPane>

        <MDBTabsPane show={justifyActive === 'tab2'}>

          <div className="text-center mb-3">
            <p>Sign un with:</p>

            <div className='d-flex justify-content-between mx-auto' style={{width: '40%'}}>
              <MDBBtn tag='a' color='none' className='m-1' style={{ color: '#1266f1' }}>
                <MDBIcon fab icon='facebook-f' size="sm"/>
              </MDBBtn>

              <MDBBtn tag='a' color='none' className='m-1' style={{ color: '#1266f1' }}>
                <MDBIcon fab icon='twitter' size="sm"/>
              </MDBBtn>

              <MDBBtn tag='a' color='none' className='m-1' style={{ color: '#1266f1' }}>
                <MDBIcon fab icon='google' size="sm"/>
              </MDBBtn>

              <MDBBtn tag='a' color='none' className='m-1' style={{ color: '#1266f1' }}>
                <MDBIcon fab icon='github' size="sm"/>
              </MDBBtn>
            </div>

            <p className="text-center mt-3">or:</p>
          </div>

          <MDBInput wrapperClass='mb-4' label='Name' id='form1' type='text'/>
          <MDBInput wrapperClass='mb-4' label='Username' id='form1' type='text'/>
          <MDBInput wrapperClass='mb-4' label='Email' id='form1' type='email'/>
          <MDBInput wrapperClass='mb-4' label='Password' id='form1' type='password'/>

          <div className='d-flex justify-content-center mb-4'>
            <MDBCheckbox name='flexCheck' id='flexCheckDefault' label='I have read and agree to the terms' />
          </div>

          <MDBBtn className="mb-4 w-100">Sign up</MDBBtn>

        </MDBTabsPane>

      </MDBTabsContent>

    </MDBContainer>
  );
}

export default App;





......local storege.................................................................................................


import React, { useState, useEffect } from 'react';

const Popup = () => {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [phone, setPhone] = useState('');

    useEffect(() => {
        const userData = JSON.parse(localStorage.getItem('user'));
        if (userData) {
            setName(userData.name);
            
        }
    }, []);

    const onChangeName = (e) => {
        setName(e.target.value);
    };

   
    const onSubmit = (e) => {
        e.preventDefault();
        const userData = {
            name: name,
            
        };
        localStorage.setItem('user', JSON.stringify(userData));
        setName('');
        
    };

    return (
        <div className="container">
            <form onSubmit={onSubmit}>
                <div className="form-group">
                    <label>Name</label>
                    <input type="text" className="form-control" value={name} onChange={onChangeName} />
                </div>
                
                <button type="submit" className="btn btn-primary btn-block">Submit</button>
            </form>
        </div>
    );
};

export default Popup;

........................................................................


// import React, { useState, useEffect } from "react";
// import Button from "react-bootstrap/Button";
// import Modal from "react-bootstrap/Modal";

// export const Popup = () => {
//   const [show, setShow] = useState(false);
//   const [userName, setUserName] = useState("");
//   const [name, setName] = useState('');

//   const handleClose = () => setShow(false);
//   const handleShow = () => setShow(true);

//   useEffect(() => {
//     setTimeout(() => {
//       setShow(true);
//     }, 500);
//     const userData = JSON.parse(localStorage.getItem('user'));
//     if (userData) {
//       setName(userData.name);
//     }
//   }, []);



//   const onChangeName = (e) => {
//     setName(e.target.value);
//   };

//   const onSubmit = (e) => {
//     e.preventDefault();
//     const userData = {
//       name: name,
//     };
//     localStorage.setItem('user', JSON.stringify(userData));
//     setName('');
//     handleClose(); 
//   };

//   return (
//     <>
//       <Modal show={show} onHide={handleClose}>
//         <Modal.Header closeButton>
//           <Modal.Title>Login</Modal.Title>
//         </Modal.Header>
//         <Modal.Body>
//           <form onSubmit={onSubmit}>
//             <div className="form-group">
//               <label>Name</label>
//               <input type="text" className="form-control" value={name} onChange={onChangeName} />
//             </div>
//           </form>
//         </Modal.Body>
//         <Modal.Footer>
//           <Button variant="secondary" onClick={handleClose}>
//             Close
//           </Button>
//           <Button variant="primary" onClick={onSubmit}>
//             Login
//           </Button>
//         </Modal.Footer>
//       </Modal>
//     </>
//   );
// };

// export default Popup;
............................................................................................................................................


import React, { useState, useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import { setName, resetName, listName } from "../features/chat/userSlice";
import Button from "react-bootstrap/Button";
import Modal from "react-bootstrap/Modal";

export const Popup = () => {
  // const show = useSelector((state) => state.users.show);
  const name = useSelector((state) => state.users.name);
  const userList = useSelector((state) => state.users.userList);
  const dispatch = useDispatch();
  const [isValidUser, setIsValidUser] = useState(true);
  const [showModal, setShowModal] = useState(false);
  

  useEffect(() => {
    setTimeout(() => {
      const userData = JSON.parse(localStorage.getItem("user"));
      if (userData) {
        dispatch(setName(userData.name));
        setShowModal(false);
      }else{
        setShowModal(false);
      }
    });
  }, []);

  const onChangeName = (e) => {
    dispatch(setName(e.target.value));
  };

  const login = (e) => {
    // e.preventDefault();
    const userData = {
      name: name,
    };
    localStorage.setItem("user", JSON.stringify(userData));
    dispatch(resetName());
    const isValidUser = userList.includes(name);

    if (isValidUser) {
      dispatch(listName());
      setShowModal(false);
    } else {
      setIsValidUser(false);
    }

     

    
  };

  return (
    <>
      <Modal
        show={showModal}
        onHide={() => {}}
        onClick={(e) => e.stopPropagation()}
      >
        <Modal.Header>
          <Modal.Title>Login</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <form onSubmit={login}>
            <div className="form-group">
              <label>Name</label>
              <input
                type="text"
                className="form-control"
                value={name}
                onChange={onChangeName}
              />
              {!isValidUser && <p className="text-danger">Invalid name!</p>}
            </div>
          </form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="success" onClick={login}>
            Login
          </Button>
          <Button variant="dark"  >
            Logout
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};

export default Popup;
................................................................................................................................................




import React, { useState, useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import { setName, resetName, listName } from "../features/chat/userSlice";
import Button from "react-bootstrap/Button";
import Modal from "react-bootstrap/Modal";

export const Popup = () => {
  const name = useSelector((state) => state.users.name);
  const userList = useSelector((state) => state.users.userList);
  const dispatch = useDispatch();
  const [isValidUser, setIsValidUser] = useState(true);
  const [showModal, setShowModal] = useState(false);

  useEffect(() => {
    setTimeout(() => {
      const userData = JSON.parse(localStorage.getItem("user"));
      if (userData) {
        dispatch(setName(userData.name));
        setShowModal(false);
      } else {
        setShowModal(false);
      }
    });
  }, []);

  const onChangeName = (e) => {
    dispatch(setName(e.target.value));
  };

  const login = (e) => {
    e.preventDefault();
    const userData = {
      name: name,
    };
    localStorage.setItem("user", JSON.stringify(userData));
    dispatch(resetName());
    const isValidUser = userList.includes(name);

    if (isValidUser) {
      dispatch(listName());
      setShowModal(false);
    } else {
      setIsValidUser(false);
    }
  };

  const logout = () => {
    localStorage.removeItem("user");
  };

  return (
    <>
      <Modal
        show={showModal}
        onHide={() => {}}
        onClick={(e) => e.stopPropagation()}
      >
        <Modal.Header>
          <Modal.Title>Login</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <form onSubmit={login}>
            <div className="form-group">
              <label>Name</label>
              <input
                type="text"
                className="form-control"
                value={name}
                onChange={onChangeName}
              />
              {!isValidUser && <p className="text-danger">Invalid name!</p>}
            </div>
          </form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="success" onClick={login}>
            Login
          </Button>
          <Button variant="dark" onClick={logout}>
            Logout
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};

export default Popup;





.................................popup.........................................


import React, { useState, useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import { setName, resetName, listName } from "../features/chat/userSlice";
import Button from "react-bootstrap/Button";
import Modal from "react-bootstrap/Modal";

export const Popup = () => {
  const name = useSelector((state) => state.users.name);
  const userList = useSelector((state) => state.users.userList);
  const dispatch = useDispatch();
  const [isValidUser, setIsValidUser] = useState(true);
  const [showModal, setShowModal] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false); // Track if the user is logged in

  useEffect(() => {
    const userData = localStorage.getItem("user");
    if (userData) {
      dispatch(setName(userData.name));
      setIsLoggedIn(true); // Set the logged-in state
    } else {
      setShowModal(true);
    }
  }, []);

  const onChangeName = (e) => {
    dispatch(setName(e.target.value));
  };

  const login = (e) => {
    e.preventDefault();
    const userData = {
      name: name,
    };
    localStorage.setItem("user", userData.name);
    dispatch(resetName());
    const isValidUser = userList.includes(name);

    if (isValidUser) {
      dispatch(listName());
      setShowModal(false);
      setIsLoggedIn(true); // Set the logged-in state
    } else {
      setIsValidUser(false);
    }
  };

  const logout = () => {
    localStorage.removeItem("user");
    setIsLoggedIn(false); // Set the logged-in state
    setShowModal(true);
  };

  if (!isLoggedIn) {
    // Show the login modal if the user is not logged in
    return (
      <>
        <Modal
          show={showModal}
          onHide={() => {}}
          onClick={(e) => e.stopPropagation()}
        >
          <Modal.Header>
            <Modal.Title>Login</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <form onSubmit={login}>
              <div className="form-group">
                <label>Name</label>
                <input
                  type="text"
                  className="form-control"
                  value={name}
                  onChange={onChangeName}
                />
                {!isValidUser && <p className="text-danger">Invalid name!</p>}
              </div>
            </form>
          </Modal.Body>
          <Modal.Footer>
            <Button variant="success" onClick={login}>
              Login
            </Button>
          </Modal.Footer>
        </Modal>
      </>
    );
  }

  // Render the protected content when the user is logged in
  return (
    <>
      <div>
        <h1>Welcome, {name}!</h1>
        <Button variant="danger" onClick={logout}>
          Logout
        </Button>
      </div>
    </>
  );
};

export default Popup;




...................................................................


import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useSelector } from "react-redux";

const ProtectedRoute = ({ children }) => {
  const user = useSelector((state) => state.users);
  const location = useLocation();

  if (!user.state) {
    const isLoggedIn = localStorage.getItem("user") !== null;

    if (!isLoggedIn) {
      return <Navigate to="/login" state={{ from: location }} replace />;
    }
  }

  const [isShow, setIsShow] = useState(false);

  useEffect(() => {
    if (user.name === localStorage.getItem("user")) {
      setIsShow(true);
    }
  }, [user.name, localStorage.getItem("user")]);

  return (
    <>
      {isShow && children}
    </>
  );
};

export default ProtectedRoute;



...............................................................................................


import { useSelector, useIsLoggedIn } from "react-redux";
import { Navigate, useLocation } from "react-router-dom";

const ProtectedRoute = ({ children }) => {
  const userList = useSelector((state) => state.users.userList);
  const location = useLocation();
  const navigate = useNavigate();
  const isLoggedIn = useIsLoggedIn();

  if (!userList) {
    const isLoggedIn = localStorage.getItem("user");

    if (!isLoggedIn) {
      return <Navigate to="/login" state={{ from: location }} replace />;
    }
  } else {
    const currentUser = localStorage.getItem("user");

    if (userList.includes(currentUser) && isLoggedIn) {
      // Navigate to the home page if the user is already logged in.
      navigate("/home");

      // Return null so that the rest of the ProtectedRoute component is not rendered.
      return null;
    } else {
      return <Navigate to="/login" state={{ from: location }} replace />;
    }
  }
};

export default ProtectedRoute;




import styled from 'styled-components';


// h1
const Heading = styled.h1`
  text-align: left;
  color: rgb(49, 127, 230);
  padding-left: 50px;
`;

// .full-body
const FullBody = styled.div`
  padding: auto;
  height: 100%;
`;

// .UI
const UI = styled.div`
  padding: 18px;
`;

// .input-section
const InputSection = styled.input`
  width: 700px;
  border-radius: 15px 0px 0px 10px;
  height: 40px;
  outline: none;
  text-decoration: none;
`;

// button
const Button = styled.button`
  border: none;
  height: 39px;
  background-color: #135faf;
  color: rgb(15, 15, 15);
  border-radius: 16px;
  padding: 5px 10px;
  cursor: pointer;
  margin: 4px;
`;

// .text
const Text = styled.p`
  color: rgb(31, 32, 32);
  word-wrap: break-word;
  margin: 5px;
  margin: 0;
  padding: 5px;
`;

// ul
const List = styled.ul`
  height: 618px;
  overflow-y: scroll;
`;

// .message-left
const MessageLeft = styled.div`
  border-radius: 0 10px 10px 10px;
  background: linear-gradient(
    90deg,
    rgb(34, 162, 231) 100%,
    rgb(34, 162, 231) 100%,
    rgb(34, 162, 231) 100%,
    rgb(34, 162, 231) 100%
  );
  padding: 10px;
  width: min-content;
  color: #0c0b0b;
  box-shadow: rgba(0, 0, 0, 0.25) 0px 5px 5px 2px;
  overflow: hidden;
  max-width: 290px;
  inline-size: max-content;
`;

// .message-right
const MessageRight = styled.div`
  border-radius: 10px 10px 0 10px;
  background: rgb(255, 250, 250);
  width: min-content;
  box-shadow: rgba(0, 0, 0, 0.25) 0px 2px 5px 2px;
  padding: 10px;
  margin-left: auto;
  overflow: hidden;
  max-width: 290px;
  inline-size: max-content;
`;

// .message-container
const MessageContainer = styled.div`
  padding: 0px;
  margin-bottom: 10px;
  max-width: 100%;
  word-wrap: break-word;
  display: flex;
`;

// .form-container
const FormContainer = styled.div`
  display: flex;
  align-items: center;
`;


// .switch input + .slider:before
const SwitchInput = styled.span`
  content: 'U1';
`;

// .chatGrid-Head
const ChatGridHead = styled.div`
  border-bottom: 0.5px solid #bfc1c4;
  background-color: white;
  grid-area: header;
`;

// .Chat-left
const ChatLeft = styled.div`
  grid-area: menu;
`;

// .chatGrid-UI
const ChatGridUI = styled.div`
  grid-area: main;
`;

// .sidebar
const Sidebar = styled.div`
  grid-area: right;
  border-left: 0.5px solid #bfc1c4;
  border-right: 0.5px solid #bfc1c4;
`;

// .container-form
const ContainerForm = styled.div`
  grid-area: footer;
`;

// .head1
const Head1 = styled.div`
  grid-area: head;
`;

// .grid-container
const GridContainer = styled.div`
  display: grid;
  grid-template-areas:
    "header header header header header header"
    "right right right main main ."
    "right right right main main .";
`;

// .list-group
const ListGroup = styled.div`
  height: 670px;
`;

// .list-group-item
const ListItem = styled.div`
  background-color: hwb(300 78% 19%);
  border: none;
  text-decoration: wheat;
`;

// .colour
const Colour = styled.div`
  background-color: #010305;
`;

// .user-right
const UserRight = styled.div`
  max-width: 290px;
  inline-size: max-content;
  margin-left: auto;
  font-size: medium;
  margin-right: 34px;
  color: #504f4f;
`;

// .user-left
const UserLeft = styled.div`
  inline-size: max-content;
  font-size: medium;
  color: #504f4f;
`;

// .VertIcon
const VertIcon = styled.div`
  color: rgb(190, 185, 185);
`;

// .toggle button
const ToggleButton = styled.button`
  border: none !important;
`;

// .dropdown-toggle::after
const DropdownToggle = styled.div`
  display: none !important;
  border: none !important;
`;

// .toggle button
const ToggleButton2 = styled.button`
  color: #dce3eb;
`;

// .e-caret-hide::after
const ECaretHide = styled.div`
  display: none;
`;

// .navbar
const Navbar = styled.div`
  text-align: center;
`;

// input
const Input = styled.input`
  border-radius: 5px;
  min-width: 65%;
  padding: 5px;
  border: none;
  background-color: #b4b9c0fd;
`;

// .chatHead
const ChatHead = styled.div`
  display: flex;
`;

// .togglebox
const ToggleBox = styled.div`
  margin-inline-start: auto;
`;

// Usage example
const MyComponent = () => {
  return (
    <FullBody>
      <UI>
        <InputSection type="text" placeholder="Enter text" />
        <Button>Submit</Button>
        <Text>Hello, World!</Text>
        <List>
          <MessageContainer>
            <MessageLeft>Left message</MessageLeft>
            <MessageRight>Right message</MessageRight>
          </MessageContainer>
        </List>
      </UI>
    </FullBody>
  );
};






import React, { useState } from "react";
import { useDispatch } from "react-redux";
import { updateValue } from "../features/chat/userSlice";
import { ChatHead, StyledButton } from "./chatStyled";
import { Button, Modal, Form, Input } from "antd";

function ChatHeader({ toggleButton, isDarkTheme }) {
  const [isToggled, setIsToggled] = useState(isDarkTheme);
  const [open, setOpen] = useState(false);
  const [confirmLoading, setConfirmLoading] = useState(false);

  const [primaryTheme, setPrimaryTheme] = useState("");
  const [secondaryTheme, setSecondaryTheme] = useState("");
  const [fontColor, setFontColor] = useState("");

  const dispatch = useDispatch();

  const onToggle = () => {
    setIsToggled(!isToggled);
    toggleButton();
  };

  const handleLogout = () => {
    dispatch(authenticate());
    localStorage.removeItem("user");
    navigate("/login");
  };

  const showModal = () => {
    setOpen(true);
  };

  const handleOk = () => {
    setConfirmLoading(true);
    setTimeout(() => {
      setOpen(false);
      setConfirmLoading(false);
    }, 2000);
  };

  const handleCancel = () => {
    setOpen(false);
  };

  const handleFormSubmit = () => {
    dispatch(
      updateValue({
        primaryTheme,
        secondaryTheme,
        fontColor,
      })
    );
  };

  return (
    <ChatHead>
      {/ Rest of the component code /}
      <div className="theme">
        <Button type="primary" onClick={showModal}>
          Themes
        </Button>
        <Modal
          title="Theme"
          visible={open}
          onOk={handleOk}
          confirmLoading={confirmLoading}
          onCancel={handleCancel}
        >
          <Form
            name="themeForm"
            labelCol={{ span: 8 }}
            style={{ maxWidth: 600 }}
            onFinish={handleFormSubmit}
          >
            <Form.Item
              label="Primary"
              name="primaryTheme"
              rules={[
                {
                  required: true,
                  message: "Please input your primary theme!",
                },
              ]}
            >
              <Input
                value={primaryTheme}
                onChange={(e) => setPrimaryTheme(e.target.value)}
              />
            </Form.Item>
            <Form.Item
              label="Secondary"
              name="secondaryTheme"
              rules={[
                {
                  required: true,
                  message: "Please input your secondary theme!",
                },
              ]}
            >
              <Input
                value={secondaryTheme}
                onChange={(e) => setSecondaryTheme(e.target.value)}
              />
            </Form.Item>
            <Form.Item
              label="Font Color"
              name="fontColor"
              rules={[
                {
                  required: true,
                  message: "Please input your font color!",
                },
              ]}
            >
              <Input
                value={fontColor}
                onChange={(e) => setFontColor(e.target.value)}
              />
            </Form.Item>
            <Form.Item wrapperCol={{ offset: 8 }}>
              <Button type="primary" htmlType="submit">
                Save
              </Button>
            </Form.Item>
          </Form>
        </Modal>
      </div>
    </ChatHead>
  );
}

export default ChatHeader;






import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  isDarkTheme: false,
  primaryTheme: "",
  secondaryTheme: "",
  fontColor: "",
};

const chatHeaderSlice = createSlice({
  name: "chatHeader",
  initialState,
  reducers: {
    updateValue(state, action) {
      const { primaryTheme, secondaryTheme, fontColor } = action.payload;
      state.primaryTheme = primaryTheme;
      state.secondaryTheme = secondaryTheme;
      state.fontColor = fontColor;
    },
  },
});

export default chatHeaderSlice.reducer;









import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { Form, Input, Button, Modal } from 'antd';
import { ChatHead, StyledButton } from './chatStyled';
import { authenticate } from '../features/chat/userSlice';
import { toggleTheme, updateValue } from '../features/chat/themeSlice';
import styled from 'styled-components';

function ChatHeader({ isDarkTheme }) {
  const [isToggled, setIsToggled] = useState(isDarkTheme);
  const [open, setOpen] = useState(false);
  const [confirmLoading, setConfirmLoading] = useState(false);
  const [modalText, setModalText] = useState('Content');
  const [themeValues, setThemeValues] = useState({
    primaryTheme: '',
    secondaryTheme: '',
    fontColor: '',
  });

  const dispatch = useDispatch();
  const navigate = useNavigate();

  const onToggle = () => {
    setIsToggled(!isToggled);
    dispatch(toggleTheme());
  };

  const handleLogout = () => {
    dispatch(authenticate());
    localStorage.removeItem('user');
    navigate('/login');
  };

  const showModal = () => {
    setOpen(true);
  };

  const handleOk = () => {
    setModalText('The modal will be closed after two seconds');
    setConfirmLoading(true);
    setTimeout(() => {
      setOpen(false);
      setConfirmLoading(false);
    }, 2000);
  };

  const handleCancel = () => {
    console.log('Clicked cancel button');
    setOpen(false);
  };

  const handleFormSubmit = () => {
    dispatch(updateValue(themeValues));
  };

  const ToggleBox = styled.div`
    margin-inline-start: auto;
    pad
  `;

  return (
    <ChatHead>
      {/ <marquee direction="right"> /}
      <div className="chatHead">
        <h1>ChatApp</h1>
      </div>
      {/ </marquee> /}

      <ToggleBox>
        <div className="togglebox">
          <label className="toggle-switch">
            <input type="checkbox" checked={isToggled} onChange={onToggle} />
            <span className="switch" />
          </label>
        </div>
      </ToggleBox>

      <div className="LogOutBtn">
        <StyledButton onClick={handleLogout}>Logout</StyledButton>
      </div>

      {/ Theme modal button /}
      <div className="theme">
        <Button type="primary" onClick={showModal}>
          Themes
        </Button>
        <Modal
          title="Theme"
          visible={open}
          onOk={handleOk}
          confirmLoading={confirmLoading}
          onCancel={handleCancel}
        >
          <Form
            name="basic"
            labelCol={{
              span: 8,
            }}
            style={{
              maxWidth: 600,
            }}
            onFinish={handleFormSubmit}
          >
            <Form.Item
              label="Primary"
              name="Primary"
              rules={[
                {
                  required: true,
                  message: 'Please input your theme!',
                },
              ]}
            >
              <Input
                onChange={(e) =>
                  setThemeValues((prevValues) => ({
                    ...prevValues,
                    primaryTheme: e.target.value,
                  }))
                }
              />
            </Form.Item>
            <Form.Item
              label="Secondary"
              name="Secondary"
              rules={[
                {
                  required: true,
                  message: 'Please input your theme!',
                },
              ]}
            >
              <Input
                onChange={(e) =>
                  setThemeValues((prevValues) => ({
                    ...prevValues,
                    secondaryTheme: e.target.value,
                  }))
                }
              />
            </Form.Item>
            <Form.Item
              label="Fontcolor"
              name="Fontcolor"
              rules={[
                {
                  required: true,
                  message: 'Please input your Fontcolor!',
                },
              ]}
            >
              <Input
                onChange={(e) =>
                  setThemeValues((prevValues) => ({
                    ...prevValues,
                    fontColor: e.target.value,
                  }))
                }
              />
            </Form.Item>
          </Form>
        </Modal>
      </div>
    </ChatHead>
  );
}

export default ChatHeader;





updateValue: (state, action) => {
      const { primaryTheme, secondaryTheme, fontColor } = action.payload;
      state.themeValues = {
        primaryTheme,
        secondaryTheme,
        fontColor,
      };
    },
  




var a = 1;



function h() {
  var a = 1;
if(a)
 var a  = 9 ;
console.log(a);
}

h();